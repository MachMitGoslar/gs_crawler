name: Base Images - Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'base_images/**'
      - '.github/workflows/base-images-deploy.yml'
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/gs_crawler

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version calculation
    
    - name: Calculate version number
      id: version
      run: |
        # Berechne Build-Nummer basierend auf Git-Commits
        build_number=$(git rev-list --count HEAD)
        version="v1.0.$build_number"
        
        echo "build_number=$build_number" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT
        
        echo "🏷️ Calculated version: $version (build: $build_number)"

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare-version
    strategy:
      matrix:
        image: 
          - python_basic_crawler
          - python_selenium_crawler
          - php_basic_crawler
          - flask_monitor
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}_${{ matrix.image }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ needs.prepare-version.outputs.version }}
          type=raw,value=build-${{ needs.prepare-version.outputs.build_number }}
          type=sha,prefix=sha-
    
    - name: Build and push ${{ matrix.image }}
      uses: docker/build-push-action@v5
      with:
        context: ./base_images/${{ matrix.image }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate image summary
      run: |
        echo "📦 Built and pushed: ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ Version: ${{ needs.prepare-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "🏗️ Build: ${{ needs.prepare-version.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
        echo "🌐 Platforms: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  test-deployed-images:
    runs-on: ubuntu-latest
    needs: [prepare-version, build-and-push]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Test deployed images
      run: |
        echo "🧪 Testing deployed base images..."
        
        images=("python_basic_crawler" "python_selenium_crawler" "php_basic_crawler" "flask_monitor")
        version="${{ needs.prepare-version.outputs.version }}"
        
        for image in "${images[@]}"; do
          echo "Testing $image:$version..."
          
          # Pull und teste das Image
          docker pull ${{ env.IMAGE_PREFIX }}_$image:$version
          
          # Basis-Test: Container kann gestartet werden
          case "$image" in
            "python_basic_crawler"|"python_selenium_crawler")
              docker run --rm ${{ env.IMAGE_PREFIX }}_$image:$version python3 --version
              docker run --rm ${{ env.IMAGE_PREFIX }}_$image:$version /bin/bash -c "ls -la /app/.venv/bin/python3"
              ;;
            "php_basic_crawler")
              docker run --rm ${{ env.IMAGE_PREFIX }}_$image:$version php --version
              ;;
            "flask_monitor")
              docker run --rm ${{ env.IMAGE_PREFIX }}_$image:$version python3 --version
              docker run --rm ${{ env.IMAGE_PREFIX }}_$image:$version /bin/bash -c "ls -la /app/.venv"
              ;;
          esac
          
          echo "✅ $image:$version works correctly"
        done

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-version, build-and-push, test-deployed-images]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: base-images-${{ needs.prepare-version.outputs.version }}
        release_name: Base Images ${{ needs.prepare-version.outputs.version }}
        body: |
          # 🐳 GS Crawler Base Images ${{ needs.prepare-version.outputs.version }}
          
          ## Built Images
          
          - `${{ env.IMAGE_PREFIX }}_python_basic_crawler:${{ needs.prepare-version.outputs.version }}`
          - `${{ env.IMAGE_PREFIX }}_python_selenium_crawler:${{ needs.prepare-version.outputs.version }}`
          - `${{ env.IMAGE_PREFIX }}_php_basic_crawler:${{ needs.prepare-version.outputs.version }}`
          - `${{ env.IMAGE_PREFIX }}_flask_monitor:${{ needs.prepare-version.outputs.version }}`
          
          ## Features
          
          - ✅ Multi-platform support (linux/amd64, linux/arm64)
          - ✅ Optimized for caching and fast builds
          - ✅ All dependencies pre-installed
          - ✅ Ready for production use
          
          ## Usage
          
          Update your Dockerfile to use the new version:
          
          ```dockerfile
          FROM ${{ env.IMAGE_PREFIX }}_python_basic_crawler:${{ needs.prepare-version.outputs.version }}
          
          COPY script.py .
          COPY crontab /etc/cron.d/mycron
          RUN chmod 0600 /etc/cron.d/mycron && crontab /etc/cron.d/mycron
          ```
          
          ## Build Details
          
          - **Build Number:** ${{ needs.prepare-version.outputs.build_number }}
          - **Commit:** ${{ github.sha }}
          - **Platforms:** linux/amd64, linux/arm64
          - **Registry:** ${{ env.REGISTRY }}
        draft: false
        prerelease: false

  update-documentation:
    runs-on: ubuntu-latest
    needs: [prepare-version, create-release]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update README with new version
      run: |
        version="${{ needs.prepare-version.outputs.version }}"
        
        # Update base_images/README.md
        sed -i "s/gs_crawler\/python_basic_crawler:latest/gs_crawler\/python_basic_crawler:$version/g" base_images/README.md
        sed -i "s/gs_crawler\/python_selenium_crawler:latest/gs_crawler\/python_selenium_crawler:$version/g" base_images/README.md
        sed -i "s/gs_crawler\/php_basic_crawler:latest/gs_crawler\/php_basic_crawler:$version/g" base_images/README.md
        sed -i "s/gs_crawler\/flask_monitor:latest/gs_crawler\/flask_monitor:$version/g" base_images/README.md
        
        echo "📝 Updated documentation with version $version"
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation changes to commit"
        else
          git add base_images/README.md
          git commit -m "docs: update base images version to ${{ needs.prepare-version.outputs.version }} [skip ci]"
          git push
        fi

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [prepare-version, build-and-push, test-deployed-images, create-release]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "# 🚀 Base Images Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Successfully Deployed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ needs.prepare-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** ${{ needs.prepare-version.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Available Images" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.IMAGE_PREFIX }}_python_basic_crawler:${{ needs.prepare-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.IMAGE_PREFIX }}_python_selenium_crawler:${{ needs.prepare-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.IMAGE_PREFIX }}_php_basic_crawler:${{ needs.prepare-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.IMAGE_PREFIX }}_flask_monitor:${{ needs.prepare-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Update your container Dockerfiles to use the new version" >> $GITHUB_STEP_SUMMARY
        echo "2. Run \`docker-compose build\` to rebuild containers" >> $GITHUB_STEP_SUMMARY
        echo "3. Test the updated containers locally" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy to production" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.test-deployed-images.result }}" == "success" ]; then
          echo "✅ All deployments successful!"
        else
          echo "❌ Some deployments failed - check logs above"
          exit 1
        fi
