name: Docker Build and Container Health Test

on:
  push:
    branches: 
      - main,
      - develop
  pull_request:
    branches: [ main ]
    
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-docker-action@v4
      
    
    - name: Create output directory
      run: |
        mkdir -p httpdocs/crawler
        echo "Created output directory for crawler data"
    
    - name: Build all Docker containers
      run: |
        echo "Building all containers..."
        docker compose build --no-cache
        echo "All containers built successfully"
    
    - name: Start all containers
      run: |
        echo "Starting all containers..."
        docker compose up -d
        echo "All containers started"
    
    - name: Wait for containers to initialize
      run: |
        echo "Waiting 60 seconds for containers to initialize..."
        sleep 60
    
    - name: Check container status
      run: |
        echo "Checking container status..."
        docker compose ps
        
        # Check if health monitor is running
        if docker compose ps | grep -q "health_monitor.*Up"; then
          echo "✅ Health monitor is running"
        else
          echo "❌ Health monitor is not running"
          docker compose logs health_monitor
          exit 1
        fi
    
    - name: Test Health Monitor API
      run: |
        echo "Testing Health Monitor API..."
        
        # Wait for health monitor to be ready
        for i in {1..30}; do
          if curl -f http://localhost:5001/api/status > /dev/null 2>&1; then
            echo "✅ Health Monitor API is responding"
            break
          fi
          echo "Waiting for Health Monitor API... (attempt $i/30)"
          sleep 2
        done
        
        
        echo "Testing status API endpoint..."
        curl -f http://localhost:5001/api/status || exit 1
        
        echo "Testing web interface..."
        curl -f http://localhost:5001/ || exit 1
    
    - name: Validate container health via API
      run: |
        echo "Validating container health via Health Monitor API..."
        
        # Get status from health monitor
        response=$(curl -s http://localhost:5001/api/status)
        echo "Health Monitor Response: $response"
        
        # Parse JSON and check for critical failures
        if echo "$response" | jq -e '.containers[] | select(.status == "critical")' > /dev/null; then
          echo "❌ Critical container failures detected"
          echo "$response" | jq '.containers[] | select(.status == "critical")'
          # Don't fail here as some containers might legitimately not have output yet
        fi
        
        # Check if health monitor itself is healthy
        if echo "$response" | jq -e '.overall_status' | grep -q "healthy\|warning"; then
          echo "✅ Overall system status is acceptable"
        else
          echo "❌ Overall system status indicates problems"
          echo "$response" | jq '.'
        fi
    
    - name: Check output files
      run: |
        echo "Checking for generated output files..."
        
        if [ -d "httpdocs/crawler" ]; then
          echo "Output directory exists"
          file_count=$(find httpdocs/crawler -type f | wc -l)
          echo "Found $file_count output files"
          
          if [ "$file_count" -gt 0 ]; then
            echo "✅ Output files are being generated"
            echo "Sample files:"
            ls -la httpdocs/crawler/ | head -10
          else
            echo "⚠️ No output files found yet (this may be normal for a short test run)"
          fi
        else
          echo "❌ Output directory not found"
          exit 1
        fi
    
    - name: Test specific crawler endpoints
      run: |
        echo "Testing access to known output files..."
        
        # List of critical files that should be accessible
        critical_files=(
          "047_bodenwasser.json"
          "035-talsperren_alle.json"
          "019_was_app.json"
          "040_hp.json"
        )
        
        available_files=0
        total_files=${#critical_files[@]}
        
        for file in "${critical_files[@]}"; do
          if [ -f "httpdocs/crawler/$file" ]; then
            echo "✅ Found: $file"
            available_files=$((available_files + 1))
          else
            echo "⚠️ Missing: $file (may not be generated yet)"
          fi
        done
        
        echo "Available critical files: $available_files/$total_files"
        
        # Don't fail if files are missing in short test - they need time to generate
        if [ "$available_files" -eq 0 ]; then
          echo "⚠️ No critical files found, but this may be expected for a quick test"
        fi
    
    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== CONTAINER STATUS ==="
        docker compose ps
        
        echo "=== HEALTH MONITOR LOGS ==="
        docker compose logs health_monitor
        
        echo "=== ALL CONTAINER LOGS (last 50 lines each) ==="
        for container in $(docker compose ps --services); do
          echo "--- Logs for $container ---"
          docker compose logs --tail=50 "$container" 2>/dev/null || echo "No logs for $container"
        done
    
    - name: Cleanup
      if: always()
      run: |
        echo "Stopping and removing containers..."
        docker compose down -v
        echo "Cleanup completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
