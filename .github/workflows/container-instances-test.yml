name: Container Instances - Build Test

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker_instances/**'
      - 'base_images/**'
      - '.github/workflows/container-instances-test.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-containers: ${{ steps.changes.outputs.changed-containers }}
      all-containers: ${{ steps.containers.outputs.all-containers }}
      base-images-changed: ${{ steps.changes.outputs.base-images-changed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changed files
      id: changes
      run: |
        echo "üîç Detecting changed containers and base images..."
        
        # Erkenne ge√§nderte Container
        changed_files=$(git diff --name-only HEAD~1 HEAD)
        changed_containers=()
        base_images_changed="false"
        
        # Pr√ºfe auf Base-Image-√Ñnderungen
        if echo "$changed_files" | grep -q "^base_images/"; then
          base_images_changed="true"
          echo "üîÑ Base images changed - will test all containers"
        fi
        
        # Sammle ge√§nderte Container
        for file in $changed_files; do
          if [[ $file == docker_instances/*/Dockerfile ]] || [[ $file == docker_instances/*/*.py ]] || [[ $file == docker_instances/*/*.php ]] || [[ $file == docker_instances/*/crontab ]]; then
            container=$(echo $file | cut -d'/' -f2)
            if [[ ! " ${changed_containers[@]} " =~ " ${container} " ]]; then
              changed_containers+=("$container")
            fi
          fi
        done
        
        # Ausgabe als JSON Array
        if [ ${#changed_containers[@]} -eq 0 ] && [ "$base_images_changed" == "false" ]; then
          echo "changed-containers=[]" >> $GITHUB_OUTPUT
        else
          printf -v joined '"%s",' "${changed_containers[@]}"
          echo "changed-containers=[${joined%,}]" >> $GITHUB_OUTPUT
        fi
        
        echo "base-images-changed=$base_images_changed" >> $GITHUB_OUTPUT
        
        echo "üìã Changed containers: ${changed_containers[*]}"
        echo "üèóÔ∏è Base images changed: $base_images_changed"
    
    - name: List all containers
      id: containers
      run: |
        echo "üì¶ Listing all available containers..."
        
        containers=()
        for dir in docker_instances/*/; do
          if [ -f "$dir/Dockerfile" ]; then
            container=$(basename "$dir")
            containers+=("$container")
          fi
        done
        
        printf -v joined '"%s",' "${containers[@]}"
        echo "all-containers=[${joined%,}]" >> $GITHUB_OUTPUT
        
        echo "üìã All containers: ${containers[*]}"

  build-base-images:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.base-images-changed == 'true' || needs.detect-changes.outputs.changed-containers != '[]'
    strategy:
      matrix:
        image: 
          - python_basic_crawler
          - python_selenium_crawler
          - php_basic_crawler
          - flask_monitor
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
    
    - name: Build and push base image ${{ matrix.image }}
      run: |
        echo "üèóÔ∏è Building base image ${{ matrix.image }}..."
        cd base_images/${{ matrix.image }}
        
        # Build base image locally
        docker buildx build \
          --platform linux/amd64 \
          --tag gs_crawler/${{ matrix.image }}:test \
          --load \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          .
        
        echo "‚úÖ Base image ${{ matrix.image }} built successfully"
    
    - name: Save base image as artifact
      run: |
        echo "üíæ Saving base image ${{ matrix.image }} as artifact..."
        docker save gs_crawler/${{ matrix.image }}:test > base_image_${{ matrix.image }}.tar
        echo "‚úÖ Base image saved to artifact"
    
    - name: Upload base image artifact
      uses: actions/upload-artifact@v4
      with:
        name: base-image-${{ matrix.image }}
        path: base_image_${{ matrix.image }}.tar
        retention-days: 1

  test-container-builds:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-base-images]
    if: always() && (needs.detect-changes.outputs.changed-containers != '[]' || needs.detect-changes.outputs.base-images-changed == 'true')
    strategy:
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.base-images-changed == 'true' && needs.detect-changes.outputs.all-containers || needs.detect-changes.outputs.changed-containers) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
    
    - name: Download base image artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: base-image-*
        path: ./artifacts
        merge-multiple: true
    
    - name: Load base images from artifacts
      run: |
        echo "üì¶ Loading base images from artifacts..."
        
        # Load all available base image artifacts
        for artifact in ./artifacts/base_image_*.tar; do
          if [ -f "$artifact" ]; then
            echo "Loading $(basename $artifact)..."
            docker load < "$artifact"
          fi
        done
        
        echo "üìã Available base images after loading:"
        docker images | grep gs_crawler || echo "No gs_crawler images found"
    
    - name: Prepare base images
      run: |
        echo "üîß Verifying base image for container ${{ matrix.container }}..."
        
        # Bestimme welches Base-Image ben√∂tigt wird
        dockerfile="docker_instances/${{ matrix.container }}/Dockerfile"
        
        if [ ! -f "$dockerfile" ]; then
          echo "‚ùå Dockerfile not found: $dockerfile"
          exit 1
        fi
        
        base_image=$(grep "^FROM" "$dockerfile" | head -1 | awk '{print $2}' | cut -d':' -f1)
        echo "üì¶ Base image needed: $base_image"
        
        # Map base image name to local tag
        case "$base_image" in
          "gs_crawler/python_basic_crawler"|"stuffdev/python_basic_crawler")
            local_tag="gs_crawler/python_basic_crawler:test"
            ;;
          "gs_crawler/python_selenium_crawler"|"stuffdev/python_selenium_crawler")
            local_tag="gs_crawler/python_selenium_crawler:test"
            ;;
          "gs_crawler/php_basic_crawler"|"stuffdev/php_basic_crawler")
            local_tag="gs_crawler/php_basic_crawler:test"
            ;;
          "gs_crawler/flask_monitor"|"stuffdev/flask_monitor")
            local_tag="gs_crawler/flask_monitor:test"
            ;;
          *)
            echo "‚ùå Unknown base image: $base_image"
            exit 1
            ;;
        esac
        
        # Verify the base image is available
        if docker images "$base_image" | grep -q "$base_image"; then
          echo "‚úÖ Base image available: $base_image"
        else
          echo "‚ùå Base image not found: $base_image"
          echo "Available images:"
          docker images | grep gs_crawler || echo "No gs_crawler images found"
          exit 1
        fi
    
    - name: Test build ${{ matrix.container }}
      run: |
        echo "üèóÔ∏è Testing build for container ${{ matrix.container }}..."
        cd docker_instances/${{ matrix.container }}
        
        # Ersetze Base-Image-Tags f√ºr Test
        sed 's/:latest/:test/g' Dockerfile > Dockerfile.test
        
        echo "üìã Dockerfile.test content:"
        cat Dockerfile.test
        
        echo "üìã Available images before build:"
        docker image list | grep -E "(gs_crawler|stuffdev)" || echo "No base images found"
        
        # Verwende standard docker build statt buildx f√ºr bessere lokale Image-Kompatibilit√§t
        docker build \
          --file Dockerfile.test \
          --tag gs_crawler_test/${{ matrix.container }}:test \
          .
        
        echo "‚úÖ Build test successful for ${{ matrix.container }}"
    
    - name: Validate container functionality
      run: |
        echo "üß™ Testing container ${{ matrix.container }} functionality..."
        
        # Grundlegende Funktionstests
        container_type=$(basename $(dirname $(find docker_instances/${{ matrix.container }} -name "*.py" -o -name "*.php" | head -1)) 2>/dev/null || echo "unknown")
        
        case "${{ matrix.container }}" in
          "000_health_monitor")
            # Flask App Test
            echo "Testing Flask health monitor..."
            docker run --rm --name test_${{ matrix.container }} -d gs_crawler_test/${{ matrix.container }}:test
            sleep 3
            # Pr√ºfe ob Container l√§uft
            if docker ps | grep -q test_${{ matrix.container }}; then
              echo "‚úÖ Health monitor container started successfully"
              docker stop test_${{ matrix.container }} || true
            else
              echo "‚ùå Health monitor container failed to start"
              docker logs test_${{ matrix.container }} || true
              exit 1
            fi
            ;;
          "002_ferienpass")
            # PHP Container Test
            echo "Testing PHP container..."
            docker run --rm gs_crawler_test/${{ matrix.container }}:test php --version
            docker run --rm gs_crawler_test/${{ matrix.container }}:test /bin/bash -c "ls -la /app"
            ;;
          *)
            # Python Container Test
            echo "Testing Python container..."
            docker run --rm gs_crawler_test/${{ matrix.container }}:test python3 --version
            docker run --rm gs_crawler_test/${{ matrix.container }}:test /bin/bash -c "ls -la /app/.venv/bin/python3"
            docker run --rm gs_crawler_test/${{ matrix.container }}:test /bin/bash -c "crontab -l || echo 'No crontab configured'"
            ;;
        esac
        
        echo "‚úÖ Functionality test passed for ${{ matrix.container }}"
    
    - name: Check container files
      run: |
        echo "üìã Checking required files for ${{ matrix.container }}..."
        
        cd docker_instances/${{ matrix.container }}
        required_files=("Dockerfile")
        
        # Container-spezifische Dateien
        case "${{ matrix.container }}" in
          "000_health_monitor")
            required_files+=("app.py" "templates")
            ;;
          "002_ferienpass")
            required_files+=("fepa_fetcher.php" "crontab")
            ;;
          *)
            required_files+=("crontab")
            # Pr√ºfe auf Script-Dateien
            if [ -f "script.py" ]; then
              required_files+=("script.py")
            fi
            ;;
        esac
        
        for file in "${required_files[@]}"; do
          if [ -e "$file" ]; then
            echo "‚úÖ Found: $file"
          else
            echo "‚ùå Missing: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present for ${{ matrix.container }}"

  test-integration:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-base-images, test-container-builds]
    if: always() && needs.test-container-builds.result == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download base image artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: base-image-*
        path: ./artifacts
        merge-multiple: true
    
    - name: Load base images from artifacts
      run: |
        echo "üì¶ Loading base images from artifacts..."
        
        # Load all available base image artifacts
        for artifact in ./artifacts/base_image_*.tar; do
          if [ -f "$artifact" ]; then
            echo "Loading $(basename $artifact)..."
            docker load < "$artifact"
          fi
        done
        
        echo "üìã Available base images after loading:"
        docker images | grep gs_crawler || echo "No gs_crawler images found"
    
    - name: Create test output directory
      run: |
        mkdir -p test_output
        echo "üìÅ Created test output directory"
    
    - name: Build subset of containers for integration test
      run: |
        echo "üîß Building key containers for integration test..."
        
        # Verify base images are available
        echo "üìã Available base images:"
        docker images | grep gs_crawler || echo "No gs_crawler images found"
        
        # Build test containers
        key_containers=("000_health_monitor" "019_was_app" "001_senioren")
        for container in "${key_containers[@]}"; do
          if [ -d "docker_instances/$container" ]; then
            echo "Building container: $container"
            cd docker_instances/$container
            sed 's/:latest/:test/g' Dockerfile > Dockerfile.test
            docker build \
              --file Dockerfile.test \
              --tag gs_crawler_test/$container:test \
              .
            cd ../..
            echo "‚úÖ Built container: $container"
          fi
        done
    
    - name: Test container interactions
      run: |
        echo "üß™ Testing container interactions..."
        
        # Starte Health Monitor
        docker run --rm --name test_health_monitor -d \
          -v $(pwd)/test_output:/app/output \
          -p 5555:5000 \
          gs_crawler_test/000_health_monitor:test
        
        sleep 5
        
        # Teste Health Monitor API
        if curl -f http://localhost:5555/api/health > /dev/null 2>&1; then
          echo "‚úÖ Health Monitor API accessible"
        else
          echo "‚ùå Health Monitor API not accessible"
          docker logs test_health_monitor
          docker stop test_health_monitor || true
          exit 1
        fi
        
        # Cleanup
        docker stop test_health_monitor || true
        
        echo "‚úÖ Integration test completed successfully"

  security-scan:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-base-images, test-container-builds]
    if: always() && needs.test-container-builds.result == 'success'
    strategy:
      matrix:
        container: ${{ fromJson(needs.detect-changes.outputs.base-images-changed == 'true' && needs.detect-changes.outputs.all-containers || needs.detect-changes.outputs.changed-containers) }}
        exclude:
          - container: "[]"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'docker_instances/${{ matrix.container }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.container }}.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.container }}.sarif'

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-base-images, test-container-builds, test-integration, security-scan]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "# üß™ Container Instances Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.detect-changes.outputs.changed-containers }}" == "[]" ] && [ "${{ needs.detect-changes.outputs.base-images-changed }}" == "false" ]; then
          echo "‚ÑπÔ∏è No containers or base images changed - no tests needed" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        echo "## üìã Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test Results
        if [ "${{ needs.test-container-builds.result }}" == "success" ]; then
          echo "‚úÖ **Container Builds:** All containers built successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Container Builds:** Some containers failed to build" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-integration.result }}" == "success" ]; then
          echo "‚úÖ **Integration Tests:** All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Integration Tests:** Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "‚úÖ **Security Scan:** No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Security Scan:** Check security tab for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üì¶ Tested Containers" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.detect-changes.outputs.base-images-changed }}" == "true" ]; then
          echo "üîÑ **All containers tested** (base images changed)" >> $GITHUB_STEP_SUMMARY
        else
          echo "üìã **Changed containers:** ${{ needs.detect-changes.outputs.changed-containers }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Overall Status
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test-container-builds.result }}" == "success" ] && [ "${{ needs.test-integration.result }}" == "success" ]; then
          echo "üéâ **Overall Status:** All tests passed - ready for merge!" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Overall Status:** Some tests failed - review required" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
