name: Base Images - Build Test

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'base_images/**'
      - '.github/workflows/base-images-test.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: 
          - python_basic_crawler
          - python_selenium_crawler
          - php_basic_crawler
          - flask_monitor
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Test build ${{ matrix.image }}
      run: |
        echo "🏗️ Testing build for ${{ matrix.image }}..."
        cd base_images/${{ matrix.image }}
        
        # Build ohne Push für Test-Zwecke
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --tag gs_crawler/${{ matrix.image }}:test \
          --progress=plain \
          .
        
        echo "✅ Build test successful for ${{ matrix.image }}"
    
    - name: Validate Dockerfile syntax
      run: |
        echo "🔍 Validating Dockerfile syntax for ${{ matrix.image }}..."
        docker run --rm -i hadolint/hadolint < base_images/${{ matrix.image }}/Dockerfile || true
    
    - name: Check required files
      run: |
        echo "📋 Checking required files for ${{ matrix.image }}..."
        required_files=("Dockerfile" "README.md")
        
        # Zusätzliche Dateien je nach Image-Typ
        case "${{ matrix.image }}" in
          "python_basic_crawler"|"python_selenium_crawler")
            required_files+=("requirements.txt" "helpers.py" "start_up.sh")
            ;;
          "php_basic_crawler")
            required_files+=("start_up.sh")
            ;;
          "flask_monitor")
            required_files+=("requirements.txt")
            ;;
        esac
        
        cd base_images/${{ matrix.image }}
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All required files present for ${{ matrix.image }}"

  test-integration:
    runs-on: ubuntu-latest
    needs: test-build-images
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build all base images locally
      run: |
        echo "🔧 Building all base images for integration test..."
        
        # Build alle Images lokal
        images=("python_basic_crawler" "python_selenium_crawler" "php_basic_crawler" "flask_monitor")
        
        for image in "${images[@]}"; do
          echo "Building $image..."
          cd base_images/$image
          docker buildx build \
            --platform linux/amd64 \
            --tag gs_crawler/$image:test \
            --load \
            .
          cd ../..
        done
    
    - name: Test container example builds
      run: |
        echo "🧪 Testing example container builds with base images..."
        
        # Teste ein Beispiel-Container mit dem Base-Image
        mkdir -p test_container
        
        cat > test_container/Dockerfile << EOF
        FROM gs_crawler/python_basic_crawler:test
        
        # Minimal test script
        RUN echo 'print("Hello from test container")' > script.py
        RUN echo '0 * * * * cd /app && .venv/bin/python3 script.py' > crontab
        RUN chmod 0600 crontab && crontab crontab
        EOF
        
        cd test_container
        docker build -t test_container:latest .
        
        # Teste ob Container startet
        docker run --rm test_container:latest /bin/bash -c "ls -la /app && python3 --version"
        
        echo "✅ Integration test successful"

  summary:
    runs-on: ubuntu-latest
    needs: [test-build-images, test-integration]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "📊 Base Images Build Test Summary"
        echo "================================"
        
        if [ "${{ needs.test-build-images.result }}" == "success" ] && [ "${{ needs.test-integration.result }}" == "success" ]; then
          echo "✅ All tests passed!"
          echo "🚀 Base images are ready for deployment"
        else
          echo "❌ Some tests failed"
          echo "🔍 Check the logs above for details"
          exit 1
        fi
